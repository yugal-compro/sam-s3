Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    Runtime: nodejs16.x
    Timeout: 120
    Handler: index.handler

Resources:
 
  s3API:
     Type: AWS::Serverless::Api
     Properties:
      StageName: "v1"

  s3APIDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
     - s3GetMethod
     - s3PostMethod
     - s3PutMethod
     - s3DeleteMethod
    Properties:
      RestApiId:
        Ref: s3API

  s3GetMethod:
   Type: AWS::ApiGateway::Method
   Properties:
     RestApiId: !Ref s3API
     ResourceId: !GetAtt 
       - s3API
       - RootResourceId
     HttpMethod: GET
     AuthorizationType: NONE
     
     Integration:
       Credentials: !GetAtt ApiGatewayIamRole.Arn
       IntegrationHttpMethod: POST
       IntegrationResponses:
          - ResponseTemplates: {"application/json": ""}
            ResponseParameters:
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            StatusCode: 200
       PassthroughBehavior: WHEN_NO_TEMPLATES     
       Type: AWS
       Uri: !Sub 
          - 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations'
          - lambdaArn: !GetAtt "GetS3ObjectFunction.Arn"
     MethodResponses: 
         - ResponseParameters: 
            method.response.header.X-Requested-With: false
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
           StatusCode: 200
    
  s3PostMethod: 
    Type: AWS::ApiGateway::Method
    Properties:
     RestApiId: !Ref s3API
     ResourceId: !GetAtt 
      - s3API
      - RootResourceId
     HttpMethod: POST
     AuthorizationType: NONE
     Integration:
       Credentials: !GetAtt ApiGatewayIamRole.Arn
       IntegrationHttpMethod: POST
       IntegrationResponses:
          - ResponseTemplates: {"application/json": ""}
            ResponseParameters:
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            StatusCode: 200
       PassthroughBehavior: WHEN_NO_TEMPLATES 
      #  RequestTemplates: 
      #     application/json: "{ \"bucketName\": \"$input.params('bucketName')\", \"key\": \"$input.params('key')\", \"body\": \"$input.params('body')\"}"    
       Type: AWS
       Uri: !Sub 
          - 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations'
          - lambdaArn: !GetAtt "PostS3ObjectFunction.Arn"
     MethodResponses: 
        # - ResponseModels: 
        #     application/json : 'Emp'
         - ResponseParameters: 
            method.response.header.X-Requested-With: false
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
           StatusCode: 200
  s3PutMethod:
     Type: AWS::ApiGateway::Method
     Properties:
      RestApiId: !Ref s3API
      ResourceId: !GetAtt 
       - s3API
       - RootResourceId
      HttpMethod: PUT
      AuthorizationType: NONE
      Integration:
       Credentials: !GetAtt ApiGatewayIamRole.Arn
       IntegrationHttpMethod: POST
       IntegrationResponses:
          - ResponseTemplates: {"application/json": ""}
            ResponseParameters:
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Methods: "'PUT,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            StatusCode: 200
       PassthroughBehavior: WHEN_NO_TEMPLATES 
      #  RequestTemplates: 
      #     application/json: "{ \"bucketName\": \"$input.params('bucketName')\", \"key\": \"$input.params('key')\", \"body\": \"$input.params('body')\"}"    
       Type: AWS
       Uri: !Sub 
          - 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations'
          - lambdaArn: !GetAtt "PutS3ObjectFunction.Arn"
      MethodResponses: 
        # - ResponseModels: 
        #     application/json : 'Emp'
          - ResponseParameters: 
             method.response.header.X-Requested-With: false
             method.response.header.Access-Control-Allow-Headers: false
             method.response.header.Access-Control-Allow-Methods: false
             method.response.header.Access-Control-Allow-Origin: false
            StatusCode: 200
          
  s3DeleteMethod:
      Type: AWS::ApiGateway::Method
      Properties:
        RestApiId: !Ref s3API
        ResourceId: !GetAtt 
         - s3API
         - RootResourceId
        HttpMethod: DELETE
        AuthorizationType: NONE
        Integration:
         Credentials: !GetAtt ApiGatewayIamRole.Arn
         IntegrationHttpMethod: POST
         IntegrationResponses:
          - ResponseTemplates: {"application/json": ""}
            ResponseParameters:
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Methods: "'DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            StatusCode: 200
         PassthroughBehavior: WHEN_NO_TEMPLATES 
        #  RequestTemplates: 
        #     application/json: "{ \"bucketName\": \"$input.params('bucketName')\", \"key\": \"$input.params('key')\", \"body\": \"$input.params('body')\"}"    
         Type: AWS
         Uri: !Sub 
          - 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations'
          - lambdaArn: !GetAtt "DeleteS3ObjectFunction.Arn"
        MethodResponses: 
        # - ResponseModels: 
        #     application/json : 'Emp'
          - ResponseParameters: 
             method.response.header.X-Requested-With: false
             method.response.header.Access-Control-Allow-Headers: false
             method.response.header.Access-Control-Allow-Methods: false
             method.response.header.Access-Control-Allow-Origin: false
            StatusCode: 200  
  LambdaApiGatewayInvoke:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "GetS3ObjectFunction.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${s3API}/*/*

  ApiGatewayIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: 'Allow'
            Principal:
              Service:
                - 'apigateway.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
  
  
  ApiGatewayPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "LambdaAccess"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        -
          Effect: 'Allow'
          Action: 'lambda:*'
          Resource: '*'
      Roles: 
      - 
        !Ref ApiGatewayIamRole

  GetS3ObjectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/get-s3-object/
      Description: To fetch the object from s3 bucket
    Events:
      ApiEvent:
        Type: Api
        Properties:
          Path: /
          Method: GET
          RestApiId:
            Ref: s3API
  PostS3ObjectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/post-s3-object/
      Description: To add the object in s3 bucket  
    Events:
      Api:
        Type: Api
        Properties:
          Path: /
          Method: POST  
  PutS3ObjectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/put-s3-object/
      Description: To update the object in s3 bucket
    Events:
      Api:
        Type: Api
        Properties:
          Path: /
          Method: PUT     
  DeleteS3ObjectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/delete-s3-object/
      Description: To delete the object from s3 bucket   
    Events:
      Api:
        Type: Api
        Properties:
          Path: /
          Method: DELETE             

Outputs:
  WebEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${s3API}.execute-api.${AWS::Region}.amazonaws.com/v1/"
  ApiGatewayIamRole:
    Description: "IAM Role created for API Gateway"
    Value: !GetAtt ApiGatewayIamRole.Arn  
           
          